#!/bin/sh

# Enable IP forwarding.
#
echo "1" > /proc/sys/net/ipv4/ip_forward

# Load alllll the kernel modules we need.
#
rmmod ipchains > /dev/null 2>&1 # for RH 7.1 users.
modprobe ip_tables
modprobe ipt_REDIRECT 
modprobe ipt_MASQUERADE 
modprobe ipt_MARK 
modprobe ipt_REJECT 
modprobe ipt_TOS   
modprobe ipt_LOG
modprobe iptable_mangle
modprobe iptable_filter
modprobe iptable_nat 
modprobe ip_nat_ftp
modprobe ip_conntrack
modprobe ipt_mac
modprobe ipt_state
modprobe ipt_mark

#
# By default, accept everything
#
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT

#
# Flush all tables
#
iptables -F
iptables -t nat -F
iptables -t mangle -F

#
# Set the default packets to fw mark 4, or 'denied'.
#
iptables -A PREROUTING -i $InternalDevice -t mangle -j MARK --set-mark 4

#
# Masquerade anything that isn't restricted.
#
# The current service classes by fwmark are:
#
#  1: Owner
#  2: Co-op
#  3: Public
#  4: Denied
#
iptables -t nat -A POSTROUTING -o $ExternalDevice -s $LocalNetwork -m mark --mark 1 -j MASQUERADE
iptables -t nat -A POSTROUTING -o $ExternalDevice -s $LocalNetwork -m mark --mark 2 -j MASQUERADE
iptables -t nat -A POSTROUTING -o $ExternalDevice -s $LocalNetwork -m mark --mark 3 -j MASQUERADE
iptables -t nat -A POSTROUTING -o $ExternalDevice -s $LocalNetwork -m mark --mark 4 -d $AuthServiceAddr -j MASQUERADE

#
# Redirect outbound non-auth web traffic to the local gateway process
#
iptables -t nat -A PREROUTING -m mark --mark 4 -p tcp --dport 80 -d ! $AuthServiceAddr -j REDIRECT --to-port 5280
iptables -t nat -A PREROUTING -m mark --mark 4 -p tcp --dport 443 -d ! $AuthServiceAddr -j REDIRECT --to-port 5280


#
# Accept DNS traffic from the internal to DNSAddr if defined,
# otherwise Masquerade to the local host (as you must be running a caching server).
#
if [ -z $DNSAddr ]; then
  iptables -t nat -A PREROUTING -p tcp -i $InternalDevice -d $LocalNetwork --dport 53 -j ACCEPT
  iptables -t nat -A PREROUTING -p udp -i $InternalDevice -d $LocalNetwork --dport 53 -j ACCEPT
else 
  iptables -t nat -A POSTROUTING -p tcp -o $ExternalDevice -d $DNSAddr --dport 53 -j MASQUERADE
  iptables -t nat -A POSTROUTING -p udp -o $ExternalDevice -d $DNSAddr --dport 53 -j MASQUERADE
fi

#
# Lock down more ports for public users, if specified.
#
# There are two philosophies in restricting access:  That Which Is Not
# Specifically Permitted Is Denied, and That Which Is Not Specifically
# Denied Is Permitted.
#
# If "IncludePorts" is defined, the default policy will be to deny all
# traffic, and only allow the ports mentioned.
#
# If "ExcludePorts" is defined, the default policy will be to allow all
# traffic, except to the ports mentioned.
#
# If both are defined, ExcludePorts will be ignored, and the default policy
# will be to deny all traffic, allowing everything in IncludePorts, and
# issue a warning.
#
if [ "$IncludePorts" ]; then

  if [ "$ExcludePorts" ]; then
    echo "Warning: ExcludePorts and IncludePorts are both defined."
    echo "Ignoring 'ExcludePorts'.  Please check your nocat.conf."
  fi

  #
  # Enable all ports in IncludePorts
  #
  #echo "Enabling public access to these ports: $IncludePorts"
  
  for port in $IncludePorts; do
    iptables -t nat -A PREROUTING -p tcp -i $InternalDevice --dport $port -m mark --mark 3 -j ACCEPT
  done

  # Always permit access to the GatewayPort (or we can't logout)
  #
  iptables -t nat -A PREROUTING -p tcp -i $InternalDevice --dport $GatewayPort -j ACCEPT
  
  # ...and disable access to the rest.
  #
  iptables -t nat -A PREROUTING -p tcp -i $InternalDevice -m mark --mark 3 -j DROP

elif [ "$ExcludePorts" ]; then
  #
  # If ExcludePorts has entries, simply deny access to them.
  #
  #echo "Denying public access to these ports: $ExcludePorts"

  for port in $ExcludePorts; do
    iptables -t nat -A PREROUTING -p tcp -i $InternalDevice --dport $port -m mark --mark 3 -j DROP
  done
fi
  

#
# Accept remaining traffic on the internal (unless noted above)
#
iptables -t nat -A PREROUTING -i $InternalDevice -j ACCEPT

#
# Enable Logging
#
#iptables -t nat -I PREROUTING -m mark --mark 4 -j LOG --log-level debug --log-ip-options

#
# Call the bandwidth throttle rules.
#
# Note: This feature is *highly* experimental.
#
# This functionality requires the 'tc' advanced router tool,
# part of the iproute2 package, available at:
# ftp://ftp.inr.ac.ru/ip-routing/
#
# To use bandwidth throttling, edit the upload and download 
# bandwidth thresholds at the top of the throttle.fw file,
# and make throttle.fw executable.  Try something like this:
#
# chmod +x throttle.fw
#
[ -x throttle.fw ] && throttle.fw

#
# Ende
#
